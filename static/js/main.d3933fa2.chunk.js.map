{"version":3,"sources":["components/loaders/PageLoader.jsx","index.js","providers/mode.js"],"names":["PageLoader","isDark","useMode","className","clsx","App","lazy","ReactDOM","render","fallback","document","getElementById","ModeContext","React","createContext","ModeProvider","children","useState","setIsDark","handleSetIsDark","useCallback","prevValue","result","useMemo","Provider","value","useContext"],"mappings":"yLAMe,SAASA,IACpB,IAAQC,EAAWC,cAAXD,OAER,OACI,qBAAKE,UAAWC,YAAK,iBAAkBH,GAAU,uBAAjD,SACI,qBAAKE,UAAWC,YAAK,cAAeH,GAAU,wBCL1D,IAAMI,EAAMC,gBAAK,kBAAM,sDAEvBC,IAASC,OACL,cAAC,IAAD,UACI,cAAC,WAAD,CAAUC,SAAU,cAACT,EAAD,IAApB,SACI,cAACK,EAAD,QAGRK,SAASC,eAAe,U,qICZtBC,EAAcC,IAAMC,cAAc,MAElCC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,EAA4BC,oBAAS,GAArC,mBAAOhB,EAAP,KAAeiB,EAAf,KAEMC,EAAkBC,uBAAY,WAChCF,GAAU,SAACG,GAAD,OAAgBA,OAC3B,IAEGC,EAASC,mBACX,iBAAO,CACHtB,SACAiB,UAAWC,KAEf,CAAClB,EAAQkB,IAGb,OAAO,cAACP,EAAYY,SAAb,CAAsBC,MAAOH,EAA7B,SAAsCN,KAG3Cd,EAAU,kBAAMwB,qBAAWd,M","file":"static/js/main.d3933fa2.chunk.js","sourcesContent":["import clsx from 'clsx';\r\nimport React from 'react';\r\n\r\nimport '../../assets/styles/loaders.css';\r\nimport { useMode } from '../../providers/mode';\r\n\r\nexport default function PageLoader() {\r\n    const { isDark } = useMode();\r\n\r\n    return (\r\n        <div className={clsx('loader-wrapper', isDark && 'loader-wrapper-dark')}>\r\n            <div className={clsx('page-loader', isDark && 'page-loader-dark')}></div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { lazy, Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport PageLoader from './components/loaders/PageLoader';\r\nimport { ModeProvider } from './providers/mode';\r\n\r\nconst App = lazy(() => import('./App'));\r\n\r\nReactDOM.render(\r\n    <ModeProvider>\r\n        <Suspense fallback={<PageLoader />}>\r\n            <App />\r\n        </Suspense>\r\n    </ModeProvider>,\r\n    document.getElementById('root')\r\n);\r\n","import React, { useMemo, useContext, useState, useCallback } from 'react';\r\n\r\nconst ModeContext = React.createContext(null);\r\n\r\nconst ModeProvider = ({ children }) => {\r\n    const [isDark, setIsDark] = useState(true);\r\n\r\n    const handleSetIsDark = useCallback(() => {\r\n        setIsDark((prevValue) => !prevValue);\r\n    }, []);\r\n\r\n    const result = useMemo(\r\n        () => ({\r\n            isDark,\r\n            setIsDark: handleSetIsDark,\r\n        }),\r\n        [isDark, handleSetIsDark]\r\n    );\r\n\r\n    return <ModeContext.Provider value={result}>{children}</ModeContext.Provider>;\r\n};\r\n\r\nconst useMode = () => useContext(ModeContext);\r\n\r\nexport { ModeProvider, useMode };\r\n"],"sourceRoot":""}